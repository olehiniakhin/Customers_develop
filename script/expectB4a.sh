#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Fri Jul 20 21:12:59 2018
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn netlify deploy  --access-token 1dc086972b99af064afae2354c3f8ce8a1e749ecf286241467d9a99b0cb4dbcc --path ./build
match_max 100000
expect -exact "\[?1034hbash-3.2\$ "
send -- "netlify deploy  --access-token 1dc0"
expect -exact "netlify deploy  --access-token 1dc0"
send -- "86972b99af064afae2354c3f8ce8a1e749ecf286241467d9a99b0cb4dbcc --path ./build"
expect -exact "86972b99af064afae2354c3f8ce8a1e749ecf286241467d9a99b0cb4dbcc --path ./build"
send -- "\r"
expect -exact "\r
\[32m?\[39m \[1mNo site id specified, create a new site\[22m \[2m(Y/n) \[22m\[48D\[48C"
send -- "y"
expect -exact "\[1000D\[K\[32m?\[39m \[1mNo site id specified, create a new site\[22m \[2m(Y/n) \[22my\[49D\[49C"
send -- "\r"
expect -exact "\[1000D\[K\[32m?\[39m \[1mNo site id specified, create a new site\[22m \[36mYes\[39m\[45D\[45C\r
Deploying folder: \[1m./build\[22m\r
\[1000D\[K/ Processing\[1000D\[K| Processing\[1000D\[K\\ Processing\[1000D\[K\r
Deploy is live (permalink):\r
  \[1mhttp://5b523441fdd72a2f0111d0da.boring-wilson-c63a74.netlify.com\[22m\r
\r
Last build is always accessible on \[1mhttp://boring-wilson-c63a74.netlify.com\[22m\r
\r
\r
bash-3.2\$ "
send -- ""
expect eof
